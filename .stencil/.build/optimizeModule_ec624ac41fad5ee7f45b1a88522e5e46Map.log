{"version":3,"names":["myComponentCss","MyComponentStyle0","MyComponent","componentWillLoad","response","fetch","ok","data","json","this","chatMessages","chat","errorMessage","error","isLoading","render","h","key","class","renderChatMessages","messageGroups","isGrouping","group","forEach","conversation","convIndex","messageType","photoSearchImage","messages","msg","msgIndex","type","_a","content","cards","card","cardIndex","push","title","text","src","imageUrl","alt","_b","href","url","target","rel","length","isAIReply","JSON","stringify"],"sources":["src/components/my-component/my-component.css?tag=my-component&encapsulation=shadow","src/components/my-component/my-component.tsx"],"sourcesContent":["/*my-component.css*/\r\n:host {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-family: 'Helvetica Neue', Arial, sans-serif;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  margin: 0;\r\n  background-color: #f0f2f5;\r\n}\r\n\r\n.chat-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 90%;\r\n  max-width: 900px;\r\n  height: 80%;\r\n  max-height: 620px;\r\n  background-color: #ffffff;\r\n  border-radius: 15px;\r\n  overflow: hidden;\r\n  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.chat-header {\r\n  background: linear-gradient(45deg, #007bff, #0056b3);\r\n  color: white;\r\n  text-align: center;\r\n  padding: 15px;\r\n  font-size: 1.5em;\r\n  font-weight: bold;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  padding: 20px;\r\n  overflow-y: auto;\r\n  background-color: #f9f9f9;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 10px;\r\n}\r\n\r\n.chat-message {\r\n  padding: 15px;\r\n  border-radius: 12px;\r\n  max-width: 80%;\r\n  position: relative;\r\n  font-size: 1em;\r\n  line-height: 1.4;\r\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.chat-message.ai {\r\n  background-color: #e1f5fe;\r\n  align-self: flex-start;\r\n  border: 1px solid #b3e5fc;\r\n}\r\n\r\n.chat-message.user {\r\n  background-color: #d1e7dd;\r\n  align-self: flex-end;\r\n  border: 1px solid #a3d5c3;\r\n}\r\n\r\n/* Chat card group container with horizontal scrolling */\r\n/* Ensure the chat-card-group maintains its height */\r\n.chat-card-group {\r\n  display: flex;\r\n  flex-direction: row; /* Horizontal alignment */\r\n  overflow-x: auto; \r\n  overflow-y: hidden; /* Horizontal scrolling */\r\n  gap: 15px; /* Spacing between cards */\r\n  padding: 10px;\r\n  background-color: #ffffff;\r\n  border: 1px solid #ddd;\r\n  min-height: 380px; /* Ensure it doesn't shrink smaller than the card height */\r\n  max-height: 380px; /* Prevent it from expanding beyond the card height */\r\n  box-sizing: border-box;\r\n}\r\n\r\n\r\n/* Custom scrollbar for horizontal scrolling */\r\n.chat-card-group::-webkit-scrollbar {\r\n  height: 8px;\r\n}\r\n\r\n.chat-card-group::-webkit-scrollbar-thumb {\r\n  background-color: #007bff;\r\n  border-radius: 4px;\r\n}\r\n\r\n.chat-card {\r\n  width: 345px;  /* Fixed width for product cards */\r\n  height: 350px; /* Fixed height for product cards */\r\n  min-width: 250px;  /* Set minimum width */\r\n  min-height: 300px; /* Set minimum height *//* Set fixed height for product cards */\r\n  border-radius: 8px;\r\n  background-color: #ffffff;\r\n  border: 1px solid #e0e0e0;\r\n  box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  transition: transform 0.3s, box-shadow 0.3s;\r\n}\r\n\r\n.chat-card:hover {\r\n  transform: translateY(-5px); /* Lift card on hover */\r\n  box-shadow: 0 6px 20px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.chat-card img {\r\n  max-width: 100%;\r\n  height: auto;\r\n  border-radius: 6px;\r\n  margin: 5px 0;\r\n  object-fit: contain;\r\n}\r\n\r\n.chat-card h4 {\r\n  margin: 5px 0;\r\n  font-size: 0.9em;\r\n  font-weight: 600;\r\n  color: #333;\r\n  text-align: center;\r\n}\r\n\r\n.chat-card a {\r\n  margin-top: 5px;\r\n  padding: 6px 12px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border-radius: 6px;\r\n  text-decoration: none;\r\n  font-size: 0.9em;\r\n  font-weight: bold;\r\n}\r\n\r\n.chat-card a:hover {\r\n  background-color: #0056b3;\r\n}\r\n\r\n.chat-message.photo-search {\r\n  display: flex;\r\n  justify-content: center; /* Center the image horizontally */\r\n  align-items: center;     /* Center the image vertically */\r\n  padding: 10px;          /* Add padding if needed */\r\n  align-self: flex-end;   /* Align to the user's side */\r\n}\r\n\r\n\r\n.chat-message.photo-search img {\r\n  width: 300px;            /* Set a fixed width */\r\n  height: auto;            /* Maintain aspect ratio */\r\n  border-radius: 8px;      /* Add rounding if desired */\r\n  object-fit: cover;       /* Cover the area while maintaining aspect ratio */\r\n}\r\n\r\n.chat-message.unknown {\r\n  background: #f8f8f8;\r\n  border: 1px dashed #ccc;\r\n  padding: 10px;\r\n  margin: 10px 0;\r\n}\r\n\r\n.chat-message.image img {\r\n  max-width: 100%;\r\n  border-radius: 5px;\r\n}\r\n\r\n.chat-card-group {\r\n  display: flex;\r\n  gap: 10px;\r\n  margin: 10px 0;\r\n}\r\n","import { Component, JSX, State, h } from \"@stencil/core\";\r\n\r\ninterface ChatMessage {\r\n  type: string; // 'text', 'card', 'image', 'photo-search', 'unknown', etc.\r\n  content: any; // Varies based on the type\r\n  isAIReply?: boolean;\r\n}\r\n\r\ninterface Conversation {\r\n  messageType: string; // e.g., 'photo-search'\r\n  photoSearchImage?: string; // Optional property for photo search images\r\n  messages: ChatMessage[]; // Messages for this conversation\r\n}\r\n\r\n@Component({\r\n  tag: \"my-component\",\r\n  styleUrl: \"my-component.css\",\r\n  shadow: true,\r\n})\r\nexport class MyComponent {\r\n  @State() chatMessages: Conversation[] = [];\r\n  @State() isLoading: boolean = true;\r\n  @State() errorMessage: string | null = null;\r\n\r\n  async componentWillLoad() {\r\n    try {\r\n      const response = await fetch(\r\n        \"https://timmy-io-smd-create-smd-creates-projects.vercel.app/api/conversation\"\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        this.chatMessages = data.chat || [];\r\n      } else {\r\n        this.errorMessage = \"Failed to load chat messages.\";\r\n      }\r\n    } catch (error) {\r\n      this.errorMessage = \"Error fetching chat messages.\";\r\n    } finally {\r\n      this.isLoading = false;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"chat-container\">\r\n        <div class=\"chat-header\">Timmy AI</div>\r\n        <div class=\"chat-messages\">\r\n          {this.isLoading ? (\r\n            <div class=\"loading\">Loading messages...</div>\r\n          ) : this.errorMessage ? (\r\n            <div class=\"error\">{this.errorMessage}</div>\r\n          ) : (\r\n            this.renderChatMessages()\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private renderChatMessages() {\r\n    const messageGroups: JSX.Element[] = [];\r\n    let isGrouping = false;\r\n    let group: JSX.Element[] = [];\r\n\r\n    this.chatMessages.forEach((conversation, convIndex) => {\r\n      const { messageType, photoSearchImage, messages } = conversation;\r\n\r\n      messages.forEach((msg, msgIndex) => {\r\n        if (msg.type === \"card\" || (msg.type === \"unknown\" && msg.content?.cards)) {\r\n          // Handle card-like messages\r\n          if (!isGrouping) {\r\n            isGrouping = true;\r\n            group = [];\r\n          }\r\n\r\n          const cards = msg.type === \"card\" ? [msg.content] : msg.content.cards;\r\n          cards.forEach((card, cardIndex) => {\r\n            group.push(\r\n              <div class=\"chat-card\" key={`card-${convIndex}-${msgIndex}-${cardIndex}`}>\r\n                <h4>{card.title?.text || \"Untitled Card\"}</h4>\r\n                <img src={card.imageUrl || \"\"} alt={card.title?.text || \"Image\"} />\r\n                <a href={card.url || \"#\"} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                  View Product\r\n                </a>\r\n              </div>\r\n            );\r\n          });\r\n        } else if (msg.type === \"text\" || msg.type === \"image\" || msg.type === \"unknown\") {\r\n          // Handle text, image, and unknown messages\r\n          if (isGrouping) {\r\n            messageGroups.push(\r\n              <div class=\"chat-card-group\" key={`group-${messageGroups.length}`}>\r\n                {group}\r\n              </div>\r\n            );\r\n            isGrouping = false;\r\n          }\r\n\r\n          if (msg.type === \"text\") {\r\n            messageGroups.push(\r\n              <div\r\n                class={`chat-message ${msg.isAIReply ? \"ai\" : \"user\"}`}\r\n                key={`text-${convIndex}-${msgIndex}`}\r\n              >\r\n                {msg.content}\r\n              </div>\r\n            );\r\n          } else if (msg.type === \"image\") {\r\n            messageGroups.push(\r\n              <div class=\"chat-message image\" key={`image-${convIndex}-${msgIndex}`}>\r\n                <img src={msg.content} alt=\"Image message\" />\r\n              </div>\r\n            );\r\n          } else if (msg.type === \"unknown\") {\r\n            messageGroups.push(\r\n              <div class=\"chat-message unknown\" key={`unknown-${convIndex}-${msgIndex}`}>\r\n                <pre>{JSON.stringify(msg.content, null, 2)}</pre>\r\n              </div>\r\n            );\r\n          }\r\n        }\r\n      });\r\n\r\n      // Handle photo search images\r\n      if (messageType === \"photo-search\" && photoSearchImage) {\r\n        messageGroups.push(\r\n          <div class=\"chat-message photo-search\" key={`photo-search-${convIndex}`}>\r\n            <img src={photoSearchImage} alt=\"Photo search result\" />\r\n          </div>\r\n        );\r\n      }\r\n\r\n      // Add grouped cards if grouping is still active\r\n      if (isGrouping) {\r\n        messageGroups.push(\r\n          <div class=\"chat-card-group\" key={`group-${messageGroups.length}`}>\r\n            {group}\r\n          </div>\r\n        );\r\n      }\r\n    });\r\n\r\n    return messageGroups;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}