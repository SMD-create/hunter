{"version":3,"file":"my-component.js","sourceRoot":"","sources":["../../../src/components/my-component/my-component.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,eAAe,CAAC;AAapD,MAAM,OAAO,WAAW;;4BAIiB,EAAE;;IAEzC,KAAK,CAAC,iBAAiB;QACrB,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,8CAA8C,CAAC,CAAC,CAAC,gCAAgC;YAC9G,IAAI,QAAQ,CAAC,EAAE,EAAE,CAAC;gBAChB,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;gBACnC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,gDAAgD;YACjF,CAAC;iBAAM,CAAC;gBACN,OAAO,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;YAChD,CAAC;QACH,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QACjC,CAAC;IACH,CAAC;IAED,MAAM;QACJ,OAAO,CACL,4DAAK,KAAK,EAAC,gBAAgB;YACzB,4DAAK,KAAK,EAAC,aAAa,eAAe;YACvC,4DAAK,KAAK,EAAC,eAAe,IACvB,IAAI,CAAC,YAAY;gBAChB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;oBACnC,IAAI,GAAG,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;wBACxB,OAAO,CACL,WAAK,KAAK,EAAE,gBAAgB,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,KAAK,IACpE,GAAG,CAAC,OAAO,CACR,CACP,CAAC;oBACJ,CAAC;yBAAM,IAAI,GAAG,CAAC,IAAI,KAAK,MAAM,EAAE,CAAC;wBAC/B,OAAO,CACL,WAAK,KAAK,EAAC,WAAW,EAAC,GAAG,EAAE,KAAK;4BAC/B,cAAK,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAM;4BACjC,WAAK,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,GAAI;4BAC/D,SAAG,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,EAAC,QAAQ,EAAC,GAAG,EAAC,qBAAqB,mBAEtE,CACA,CACP,CAAC;oBACJ,CAAC;oBACD,OAAO,IAAI,CAAC,CAAC,uCAAuC;gBACtD,CAAC,CAAC,CACA,CAKF,CACP,CAAC;IACJ,CAAC;;;;;;;;;;;;CACF","sourcesContent":["import { Component, State, h } from '@stencil/core';\r\n\r\ninterface ChatMessage {\r\n  type: string; // e.g., 'text' or 'card'\r\n  content: any; // can be a string for text or an object for cards\r\n  isAIReply?: boolean; // Optional property to indicate if the message is from AI\r\n}\r\n\r\n@Component({\r\n  tag: 'my-component',\r\n  styleUrl: 'my-component.css',\r\n  shadow: true,\r\n})\r\nexport class MyComponent {\r\n  /**\r\n   * Backend chat messages\r\n   */\r\n  @State() chatMessages: ChatMessage[] = [];\r\n\r\n  async componentWillLoad() {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/fetch-conversation'); // Replace with your backend URL\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        this.chatMessages = data.chat; // Assuming the response structure is compatible\r\n      } else {\r\n        console.error('Error fetching chat messages');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error:', error);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div class=\"chat-container\">\r\n        <div class=\"chat-header\">Timmy AI</div>\r\n        <div class=\"chat-messages\">\r\n          {this.chatMessages &&\r\n            this.chatMessages.map((msg, index) => {\r\n              if (msg.type === 'text') {\r\n                return (\r\n                  <div class={`chat-message ${msg.isAIReply ? 'ai' : 'user'}`} key={index}>\r\n                    {msg.content}\r\n                  </div>\r\n                );\r\n              } else if (msg.type === 'card') {\r\n                return (\r\n                  <div class=\"chat-card\" key={index}>\r\n                    <h4>{msg.content.title.text}</h4>\r\n                    <img src={msg.content.imageUrl} alt={msg.content.title.text} />\r\n                    <a href={msg.content.productUrl} target=\"_blank\" rel=\"noopener noreferrer\">\r\n                      View Product\r\n                    </a>\r\n                  </div>\r\n                );\r\n              }\r\n              return null; // In case of unrecognized message type\r\n            })}\r\n        </div>\r\n        {/*<div class=\"chat-input-container\">\r\n          <input type=\"text\" class=\"chat-input\" placeholder=\"Type your message...\" />\r\n          <button class=\"send-button\">Send</button>\r\n        </div>*/}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"]}